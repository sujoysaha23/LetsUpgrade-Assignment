import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
dtc = DecisionTreeClassifier()
from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier()
from sklearn import svm
svc = svm.SVC()


df = pd.read_csv("G:/$ujoy/Python learning/LetsUpgrade/LetsUpgrade AI_ML project/My work/data.csv")
# df = pd.read_csv("https://raw.githubusercontent.com/ingledarshan/AIML-B2/main/data.csv")

# print(df.head())
# print(df.columns)
# print(df.info())

df = df.drop("Unnamed: 32", axis=1)
# print(df.columns)

df.drop("id", axis=1, inplace = True)
# print(df.columns)
# print(type(df.columns))

l = list(df.columns)
# print(l)

""" Catagorised the columns as per requiremnt """
features_mean = l[1:11]
features_se = l[11:21]
features_worst = l[21:]
# print(features_mean)
# print(features_se)
# print(features_worst)

""" Explore the data """
# print(df.head(2))
# print(df["diagnosis"].unique())
# print(df["diagnosis"].value_counts())

# print(df.describe())
a = sns.countplot(df["diagnosis"], label="Count");
# print(a)

""" Corelation plot """
corr = df.corr()
# print(corr)
# print(corr.shape)

plt.figure(figsize=(14,14))
b = sns.heatmap(corr);
# print(b)

df["diagnosis"] = df["diagnosis"].map({"M":1, "B":0})
# print(df.head())
# print(df["diagnosis"].unique())


"""Creating Test & Train data"""
X = df.drop("diagnosis", axis=1)
y = df["diagnosis"]
# print(X.head())
# print(y.head())

# from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.3)
# print(X_train.shape)
# print(X_test.shape)
# print(y_train.shape)
# print(y_test.shape)

"""Scaling my data for better model build"""
# from sklearn.preprocessing import StandardScaler
# ss = StandardScaler()
X_train = ss.fit_transform(X_train)
X_test = ss.transform(X_test)

""" Machine Learning model """
" Logistic regression (Classification problem solving)"
# from sklearn.linear_model import LogisticRegression
# lr = LogisticRegression()
lr.fit(X_train, y_train)

# predict the data
y_pred = lr.predict(X_test)

# Accuracy test on predict data
# from sklearn.metrics import accuracy_score
lr_acc = accuracy_score(y_test, y_pred)
# print(lr_acc)


# storing all the accuracy of different ML Algo for comparission
results = pd.DataFrame()

tempResults = pd.DataFrame({"Algorithm" : ["Logistic Regressing Method"], "Accuracy":[lr_acc]})
results = pd.concat([results, tempResults])
results = results[["Algorithm", "Accuracy"]]
# print(results)

""" Decision Tree Classifier (Classification problem solving) """
# from sklearn.tree import DecisionTreeClassifier
# dtc = DecisionTreeClassifier()
dtc.fit(X_train, y_train)

# predict the data
y_pred = dtc.predict(X_test)

# Accuracy test on predict data
# from sklearn.metrics import accuracy_score
dtc_acc = accuracy_score(y_test, y_pred)
# print(dtc_acc)

tempResults = pd.DataFrame({"Algorithm" : ["Decision Tree Classifier Method"], "Accuracy":[dtc_acc]})
results = pd.concat([results, tempResults])
results = results[["Algorithm", "Accuracy"]]
# print(results)

""" Random Forest Classifier (Classification problem solving) """
# from sklearn.ensemble import RandomForestClassifier
# rfc = RandomForestClassifier()
rfc.fit(X_train, y_train)

# predict the data
y_pred = rfc.predict(X_test)

# Accuracy test on predict data
# from sklearn.metrics import accuracy_score
rfc_acc = accuracy_score(y_test, y_pred)
# print(rfc_acc)

tempResults = pd.DataFrame({"Algorithm" : ["Random Forest Classifier Method"], "Accuracy":[rfc_acc]})
results = pd.concat([results, tempResults])
results = results[["Algorithm", "Accuracy"]]
# print(results)


""" Support Vector Classifier """
# from sklearn import svm
# svc = svm.SVC()
svc.fit(X_train,y_train)

# predict the data
y_pred = svc.predict(X_test)

# Accuracy test on predict data
# from sklearn.metrics import accuracy_score
svc_acc = accuracy_score(y_test, y_pred)
# print(svc_acc)

tempResults = pd.DataFrame({"Algorithm" : ["Support Vector Classifier Method"], "Accuracy":[svc_acc]})
results = pd.concat([results, tempResults])
results = results[["Algorithm", "Accuracy"]]
print(results)


" Done the basic code shown by the teacher "





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































